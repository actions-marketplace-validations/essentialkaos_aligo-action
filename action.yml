name: "EK Aligo"
description: "Action for checking Golang struct alignment"
author: "ESSENTIALKAOS"

branding:
  icon: 'align-left'
  color: 'white'

inputs:
  path:
    description: "Path to directory with sources"
    required: true

  files:
    description: "Files or directories to check"
    required: true

  version:
    description: "Version of Aligo"
    required: false
    default: "1.5.3"

runs:
  using: "composite"
  steps:
    - id: aligo-bin-cache
      name: Cache aligo binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/aligo
        key: ${{runner.os}}-ek-aligo-action-v${{inputs.version}}

    - id: aligo-install
      name: Install Aligo
      if: steps.aligo-bin-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "::group::Downloading Aligo…"
        mkdir -p ~/.cache
        aligo_url="https://apps.kaos.st/aligo/${{inputs.version}}/"
        if [[ "$RUNNER_OS" == "Linux" ]] ; then
          wget -O ~/.cache/aligo "${aligo_url}/linux/x86_64/aligo" 2>&1
        elif [[ "$RUNNER_OS" == "macOS" ]] ; then
          wget -O ~/.cache/aligo "${aligo_url}/macosx/x86_64/aligo" 2>&1
        else
          echo "::endgroup::"
          echo "$RUNNER_OS is not supported"
          exit 1
        fi
        echo "::endgroup::"

        chmod +x ~/.cache/aligo

    - id: aligo-version-print
      name: Print Aligo version info
      shell: bash
      run: |
        echo "::group::Print Aligo version…"
        ~/.cache/aligo --version
        echo "::endgroup::"

    - id: aligo-check
      name: Check Golang sources with Aligo
      shell: bash
      run: |
        echo "Running Aligo…"
        pushd ${{inputs.path}} &> /dev/null
        ~/.cache/aligo check ${{inputs.files}}
        popd &> /dev/null
